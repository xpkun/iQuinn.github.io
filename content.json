{"meta":{"title":"iQuinn","subtitle":"Kun Peng","description":"Action Speaks Louder Than Words","author":"Kun Peng","url":"http://iquinn.github.io"},"pages":[{"title":"About","date":"2016-12-08T15:02:08.000Z","updated":"2016-11-04T10:36:56.000Z","comments":true,"path":"about/index.html","permalink":"http://iquinn.github.io/about/index.html","excerpt":"","content":""},{"title":"Categories","date":"2016-12-08T15:02:08.000Z","updated":"2016-11-04T10:36:56.000Z","comments":true,"path":"categories/index.html","permalink":"http://iquinn.github.io/categories/index.html","excerpt":"","content":""},{"title":"Tagcloud","date":"2016-12-08T15:02:08.000Z","updated":"2016-12-08T14:16:28.000Z","comments":true,"path":"tags/index.html","permalink":"http://iquinn.github.io/tags/index.html","excerpt":"","content":""}],"posts":[{"title":"Spring boot 学习指南-HelloWorld","slug":"World","date":"2016-11-19T10:17:24.000Z","updated":"2016-12-08T17:07:22.000Z","comments":true,"path":"2016/11/19/World/","link":"","permalink":"http://iquinn.github.io/2016/11/19/World/","excerpt":"1.Hello World自从structs2出现上次的漏洞以后，对spring的关注度开始越来越浓。 1.1 新建1.1.1 打开Intellij Idea,新建一个Spring initializr 项目。如下图:","content":"1.Hello World自从structs2出现上次的漏洞以后，对spring的关注度开始越来越浓。 1.1 新建1.1.1 打开Intellij Idea,新建一个Spring initializr 项目。如下图: 1.1.2 New Project输入项目名，包名等信息。 1.1.3 选择在项目中要用到的模块，选择Web–Web,Template engine选择Thymeleaf. 1.1.4 完成新建,点击完成，Idea 会去加载相关的依赖包。 1.2 项目结构 1.3 配置文件说明1.3.1 application.properties 保存spring配置文件信息，如数据库信息，启动端口号等。1.3.1 pom.xml 包含了我们在hello中要用到的一些依赖包。其中：spring-boot-starter-thymeleaf 是thymeleaf 在java包中的依赖。spring-boot-starter-web spring web 项目的配置spring-boot-starter-test 包含了spring boot单元测试 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.kun.hello&lt;/groupId&gt; &lt;artifactId&gt;hello&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;Hello&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.4.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 1.3.3 HelloApplication.java1234567891011import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class HelloApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(HelloApplication.class, args); &#125;&#125; 1.3.4 HelloController.java1234567891011121314151617import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;@Controller@RequestMapping(\"/\")public class HelloController &#123; @RequestMapping(\"/\") public ModelAndView hello() &#123; ModelAndView mav = new ModelAndView(); mav.setViewName(\"hello\"); return mav; &#125;&#125; 在Hellocontroller的hello方法中。返回值可返回一个hello字符串，返回值类型也需要为一个Strng类型。 1.3.5 在resource/templates新建一个hello.html文件，名字和Hellocontroller里的viewName一样。hello.html 12345678910!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; Hello world&lt;/body&gt;&lt;/html&gt; 1.3.6 目录结构 1.4 启动，查看结果 默认端口号为8080,访问可以输入：http://localhost:8080 或http://127.0.0.1:8080","categories":[{"name":"Java","slug":"Java","permalink":"http://iquinn.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://iquinn.github.io/tags/Java/"},{"name":"Springboot","slug":"Springboot","permalink":"http://iquinn.github.io/tags/Springboot/"},{"name":"Springcloud","slug":"Springcloud","permalink":"http://iquinn.github.io/tags/Springcloud/"}]},{"title":"Vim airline setting","slug":"setting-md","date":"2016-11-18T16:21:50.000Z","updated":"2016-12-08T16:56:08.000Z","comments":true,"path":"2016/11/19/setting-md/","link":"","permalink":"http://iquinn.github.io/2016/11/19/setting-md/","excerpt":"解决乱码问题12345678910111213\"---------------alrLine Config-------------- if !exists('g:airline_symbols') let g:airline_symbols = &#123;&#125; endif let g:airline_symbols.space = \"\\ua0\" let g:airline_exclude_filename = [] let g:Powerline_symbols='fancy' let g:airline_powerline_fonts=0 let Powerline_symbols='fancy' let g:bufferline_echo=0 set laststatus=2 set t_Co=256 set fillchars+=stl:\\ ,stlnc:\\\" ###","content":"解决乱码问题12345678910111213\"---------------alrLine Config-------------- if !exists('g:airline_symbols') let g:airline_symbols = &#123;&#125; endif let g:airline_symbols.space = \"\\ua0\" let g:airline_exclude_filename = [] let g:Powerline_symbols='fancy' let g:airline_powerline_fonts=0 let Powerline_symbols='fancy' let g:bufferline_echo=0 set laststatus=2 set t_Co=256 set fillchars+=stl:\\ ,stlnc:\\\" ### 添加相应符号12345678910111213\" unicode symbolslet g:airline_left_sep = '»'let g:airline_left_sep = '▶'let g:airline_right_sep = '«'let g:airline_right_sep = '◀'let g:airline_symbols.linenr = '␊'let g:airline_symbols.linenr = '␤'let g:airline_symbols.linenr = '¶'let g:airline_symbols.branch = '⎇'let g:airline_symbols.paste = 'ρ'let g:airline_symbols.paste = 'Þ'let g:airline_symbols.paste = '∥'let g:airline_symbols.whitespace = 'Ξ'","categories":[{"name":"VIM","slug":"VIM","permalink":"http://iquinn.github.io/categories/VIM/"},{"name":"Airline","slug":"VIM/Airline","permalink":"http://iquinn.github.io/categories/VIM/Airline/"}],"tags":[]},{"title":"JAVA put,accumulate,element的区别.md","slug":"put-accumulate-element的区别-md","date":"2016-11-18T14:36:50.000Z","updated":"2016-11-18T14:45:59.000Z","comments":true,"path":"2016/11/18/put-accumulate-element的区别-md/","link":"","permalink":"http://iquinn.github.io/2016/11/18/put-accumulate-element的区别-md/","excerpt":"1.put (Object key, Object value) public Object put (Object key, Object value) 将value映射到key下。如果此JSONObject对象之前存在一个value在这个key下，当前的value会替换掉之前的value 2.accumulate (String key, Object value) public JSONObject accumulate (String key, Object value) 累积value到这个key下。这个方法同element()方法类似，特殊的是，如果当前已经存在一个value在这个key下那么一个JSONArray将会存储在这个key下来保存所有累积的value。如果已经存在一个JSONArray，那么当前的value就会添加到这个JSONArray中。相比之下replace方法会替代先前的value","content":"1.put (Object key, Object value) public Object put (Object key, Object value) 将value映射到key下。如果此JSONObject对象之前存在一个value在这个key下，当前的value会替换掉之前的value 2.accumulate (String key, Object value) public JSONObject accumulate (String key, Object value) 累积value到这个key下。这个方法同element()方法类似，特殊的是，如果当前已经存在一个value在这个key下那么一个JSONArray将会存储在这个key下来保存所有累积的value。如果已经存在一个JSONArray，那么当前的value就会添加到这个JSONArray中。相比之下replace方法会替代先前的value 3.element (String key, Object value)public JSONObject element (String key, Object value) 将键/值对放到这个JSONObject对象里面。如果当前value为空(null)，那么如果这个key存在的话，这个key就会移除掉。如果这个key之前有value值，那么此方法会调用accumulate()方法。","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://iquinn.github.io/categories/JAVA/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://iquinn.github.io/tags/Java/"},{"name":"JSON","slug":"JSON","permalink":"http://iquinn.github.io/tags/JSON/"}]},{"title":"Java对象转JSON日期问题解决办法(2)","slug":"Java对象转JSON日期问题解决办法-2","date":"2016-11-17T13:31:40.000Z","updated":"2016-11-17T14:32:57.000Z","comments":true,"path":"2016/11/17/Java对象转JSON日期问题解决办法-2/","link":"","permalink":"http://iquinn.github.io/2016/11/17/Java对象转JSON日期问题解决办法-2/","excerpt":"一、防止包自含 在JSON-LIB中，要转换的对象包含自身对象时，会抛出异常There is a cycle in the hierarchy，解决办法：1jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);","content":"一、防止包自含 在JSON-LIB中，要转换的对象包含自身对象时，会抛出异常There is a cycle in the hierarchy，解决办法：1jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT); 二、自定义要被转换的字段1234567891011121314151617config.setJsonPropertyFilter(new PropertyFilter() &#123; @Override public boolean apply(Object source, String name, Object value) &#123; // TODO Auto-generated method stub if (name.equals(\"id\") || name.equals(\"serialNumber\") || name.equals(\"productName\") || name.equals(\"emailAddress\") || name.equals(\"applySatus\") || name.equals(\"remark\") || name.equals(\"applyStatusLabel\") || name.equals(\"applyDate\")) &#123; return false; &#125; return true; &#125; &#125;); 三、解决延迟加载产生异常的问题(net.sf.json.JSONException: java.lang.reflect.InvocationTargetException)123JsonConfig config = new JsonConfig(); // 解决延迟加载产生异常的问题 config.setExcludes(new String[] &#123; \"handler\", \"hibernateLazyInitializer\" &#125;); 四、解决数据库查询结果中，Date转换的问题(net.sf.json.JSONException: java.lang.reflect.InvocationTargetException)123456789101112131415161718192021222324252627config.registerJsonValueProcessor(java.util.Date.class, new JsonValueProcessor() &#123; @Override public Object processArrayValue(Object obj, JsonConfig jsonconfig) &#123; return null; &#125; @Override public Object processObjectValue(String key, Object value, JsonConfig jsonConfig) &#123; if (value == null) return \"\"; // 注意：在判断几个父子级类型时要先判断子类型再判断父类型 if (value instanceof java.sql.Date) &#123; String str = DateUtil.dateToStr((java.util.Date) value, \"yyyy-MM-dd\");//这里是我封装的工具,可以使用SimpleDateFormat代替，一样 return str; &#125; else if (value instanceof java.sql.Timestamp || value instanceof java.util.Date) &#123; String str = DateUtil.dateToStr((java.util.Date) value, \"yyyy-MM-dd HH:mm:ss\"); return str; &#125; return value.toString(); &#125; &#125;); 五、结果转换有些字段的类型是枚举类型，可以在转换的时候将值设置为枚举类的value或者是label1234567891011121314151617181920config.registerJsonValueProcessor(ApproveStateType.class, new JsonValueProcessor() &#123; @Override public Object processObjectValue(String key, Object value, JsonConfig jsonConfig) &#123; // TODO Auto-generated method stub if (value instanceof ApproveStateType) &#123; ApproveStateType tmpValue = (ApproveStateType) value; return tmpValue.getValue(); &#125; return value.toString(); &#125; @Override public Object processArrayValue(Object arg0, JsonConfig arg1) &#123; // TODO Auto-generated method stub return null; &#125; &#125;);","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://iquinn.github.io/categories/JAVA/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://iquinn.github.io/tags/Java/"},{"name":"JSON","slug":"JSON","permalink":"http://iquinn.github.io/tags/JSON/"}]},{"title":"Java对象转JSON日期问题解决办法(1)","slug":"Java对象转JSON日期问题解决办法-1","date":"2016-11-16T15:49:54.000Z","updated":"2016-11-17T14:34:13.000Z","comments":true,"path":"2016/11/16/Java对象转JSON日期问题解决办法-1/","link":"","permalink":"http://iquinn.github.io/2016/11/16/Java对象转JSON日期问题解决办法-1/","excerpt":"12345678910public class JsonDateConfig&#123; public static JsonConfig getDateJsonConfig() &#123; JsonConfig jc = new JsonConfig(); jc.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor()); return jc; &#125; &#125;","content":"12345678910public class JsonDateConfig&#123; public static JsonConfig getDateJsonConfig() &#123; JsonConfig jc = new JsonConfig(); jc.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor()); return jc; &#125; &#125; 2、JsonDateValueProcessor.java1234567891011121314151617181920212223242526272829303132333435public class JsonDateValueProcessor implements JsonValueProcessor&#123; private static final String FORMAT = \"yyyy-MM-dd HH:mm:ss\"; /** * 把集合转换为字符串 */ public Object processArrayValue(final Object value, final JsonConfig config) &#123; return process(value); &#125; /** * 把集合转换为字符串 */ public Object processObjectValue(final String key, final Object value, final JsonConfig config) &#123; return process(value); &#125; /** * * 把时间转换为字符串 */ private Object process(final Object value) &#123; if (value instanceof Date) &#123; final SimpleDateFormat sdf = new SimpleDateFormat(FORMAT, Locale.UK); return sdf.format(value); &#125; return value == null ? \"\" : value.toString(); &#125; 3、使用1JSONObject sjson = JSONObject.fromObject(service, JsonDateConfig.getDateJsonConfig());","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://iquinn.github.io/categories/JAVA/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://iquinn.github.io/tags/Java/"},{"name":"JSON","slug":"JSON","permalink":"http://iquinn.github.io/tags/JSON/"}]}]}